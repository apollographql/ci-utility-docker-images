name: Build & Publish Docker Images - Daily

on:
  schedule:
    - cron: "0 10 * * *" # Run this job every day at 10am to get a daily build
  workflow_dispatch: { }

env:
  REGISTRY: ghcr.io
  NAMESPACED_REGISTRY: ghcr.io/apollographql/ci-utility-docker-images

jobs:
  find-all-docker-images:
    uses: .github/workflows/find_all_docker_images.yaml
  build-and-push-images:
    name: Build and Push Docker Image
    needs: find-all-docker-images
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        image_directory: ${{ fromJSON(needs.find-all-docker-images.outputs.docker_images ) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
      - name: Get current date
        id: get-date
        run: echo "date=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
      - name: Log in to the Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Details From config.yml
        id: extract_from_config_yaml
        run: |
          echo "desired_version=$(cat ${{ github.workspace }}/${{ matrix.image_directory }}/config.yml | yq '.version')" >> "$GITHUB_OUTPUT"
          echo "platforms=$(cat ${{ github.workspace }}/${{ matrix.image_directory }}/config.yml | yq '.platforms | join(",")')" >> "$GITHUB_OUTPUT"
          echo "description=$(cat ${{ github.workspace }}/${{ matrix.image_directory }}/config.yml | yq '.description')" >> "$GITHUB_OUTPUT"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@941183f0a080fa6be59a9e3d3f4108c19a528204
      - name: Get Docker Metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: ${{ env.NAMESPACED_REGISTRY }}/${{ matrix.image_directory }}
          tags: |
            type=schedule,pattern={{version}},value=v${{ steps.extract_from_config_yaml.outputs.desired_version }}-${{ steps.get-date.outputs.date }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image_directory }}
            org.opencontainers.image.description=${{ steps.extract_from_config_yaml.outputs.description }}
            org.opencontainers.image.vendor=Apollo GraphQL
            org.opencontainers.image.licenses=MIT
          annotations: |
            org.opencontainers.image.title=${{ matrix.image_directory }}
            org.opencontainers.image.description=${{ steps.extract_from_config_yaml.outputs.description }}
            org.opencontainers.image.vendor=Apollo GraphQL
            org.opencontainers.image.licenses=MIT
      - name: Build and Push Docker image
        id: push
        uses: docker/build-push-action@67dc78bbaf388b3265f7e1c880e681f4b90d5f48
        with:
          context: ${{ github.workspace }}/${{ matrix.image_directory }}
          file: ${{ github.workspace }}/${{ matrix.image_directory }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ steps.extract_from_config_yaml.outputs.platforms }}
  check-builds-all-completes:
    name: Docker Images Built & Pushed
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - build-and-push-images
    steps:
      - run: |
          exit ${{ (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) && 1 || 0 }}


